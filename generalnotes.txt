Windows OS based on messages
    - Events put messages into the message queue
    - Message loop retrieves messages and handles them
    - Example messages:
        - WM_PAINT: Message to repaint the window
        - WM_LBUTTONDOWN: The left mouse button was pushed down

SDK
    - Needs a window procedure attached to the main window
    Dialog:
        - A simple window with information for the user and/or some minor input fields

Graphics
    - Resources are passed around in the form of integer IDs
    - Handled almost exclusively in WM_PAINT
    - Device Context: Represents a drawing surface (virtual or physical)
    InvalidateRect:
        - Triggers WM_PAINT
        - Can invalidate just parts of a window or whole window
        - Can specify whether to clear old contents first
    Drawing objects:
        - GDI has brushes, pens and text objects
        - Created by calls to the API
        - Will NOT be deleted automatically - can be kept or deleted, but must not be discarded
    Stock objects:
        - Acquired through GetStockObject
        - Predefined
        - Do NOT delete!

Function pointers
    - Allows us to pass functions as arguments
    - Need a type that can hold a pointer to a function, example:
        typedef int (*FPTYPE) (int a, int b)
        This creates the type FPTYPE which can hold functions that take two ints and return an int

Standard Template Library
    - Collection of containers that can be used with any type
    - Example: List

Keyboard interaction
    - Handled through messages like WM_KEYDOWN, WM_KEYUP, etc
    - Keys have IDs that can be compared to VK_UP, VK_DOWN etc
    - When listening for ASCII characters, use WM_CHAR instead

Drawing context
    - The function BeginPaint returns a drawing context
    - Can create a virtual DC with CreateCompatibleDC(), which is compatible with our original DC
    - Must create a new bitmap for the virtual DC to draw on it
    - By drawing everything on a virtual DC and copying it to the main one, we can perform double buffering
    - Double buffering allows us to avoid flickering effects
    Copying from buffer to original:
        - BitBlt: Just copies
        - StretchBlt: Can stretch and/or mirror copied area
        - TransparentBlt: Can make regions transparent
        - PlgBlt: Can skew and rotate the copied area
        - Others

Timers
    - Periodically send WM_TIMER to a window
    - Can optionally specify a callback instead of sending WM_TIMER

Device capabilities and information
    - Determine size of drawing area with GetClientRect()
    - Get other information through GetDeviceCaps()

Threads
    - Create thread with CreateThread(), passing to it a function (or address of where to start)
    - Can wait for threads to finish with WaitForMultipleObjects()
    - InitializeCriticalSection() returns a semaphore-like object
    - Can use EnterCriticalSection() and LeaveCriticalSection() to ensure critical sections are left well enough alone

.NET
    - Common Language Runtime (CLR) combines languages
    - Windows Presentation Foundation separates the GUI (XAML) from the model (C#)
    - Code that targets the CLR is called managed code; code that doesn't is unmanaged

Assemblies
    - No relation to Assembly language
    - Is a .NET library or executable
    - Contains metadata that allows other projects to use the functions within
    - Library: Compiled code with no Main() method, that can't be used as a program but can be included in other code

Namespace
    - A way to organise .NET code
    - Groups together classes with a close relation
    - Allows multiple namespaces to have classes with the same name
    - Can be imported with the "using" directive
    - Need references in the project to be able to use a namespace from outside the project

Reference/Value types
    - Value types hold the data about themselves within their allocation (C++ analogue: variables on stack)
    - Reference types store a reference to their values on the heap (C++ analogue: variables on heap)
    - Value types are numeric types, boolean, char, date, all structures, and enumerations
    - Everything else is a reference type
    - When assigning to a new variable, value types are copied while only the pointer to the reference type is copied
    - Boxing can be done to place a value type in a reference type container

Properties
    - Holy shit why is .NET the only thing to do this
    - Seriously other languages what the fuck are you doing
    - This is brilliant
    - A property is a class member with a getter and/or a setter
    - Can be used like a regular class variable in code in or outside the class
    - Visibility just like any other class member
    - Getter and setter can have individual visibility, or not exist
    - Default getter and setter just get and set the raw variable, but can be implemented differently

Windows Forms
    - Needs one main file program.cs which is the program's starting point
    - One or more forms, having:
        - Design file (C#)
        - Code file (C#)
        - Resource file (RESX)
    - Can have other code files
    - Forms can easily have more or fewer files than the above, that is a VS convention
    - VS Designer allows you to drag and drop visual components to the form
    - Components can also be modified through code

Windows Presentation Foundation (WPF)
    - Graphical elements are designed in a XAML file
    - XAML is XML with an extra A (seriously why though)
    - Uses DirectX instead of GDI
    - Instead of starting in code, a tag in XAML defines the starting point

Delegates
    - A delegate is similar to a function pointer, but can hold multiple functions
    - When a delegate is called, all functions that have been added to it are called
    - Delegates must be declared with a specific signature and can only take functions with that signature
    - Like a class, you must first declare the delegate type before you can make instances of it
    - Delegates can be created where classes can be created
    - Delegate instances can be created where regular variables can be created
    - Functions can be assigned with += and removed with -=
    - Using = will initialise the delegate, and remove all previously added functions
    - Calling a delegate will throw an exception if no functions were added to it
    - Otherwise, the delegate can be called just like any other function with its signature
    - If only one function has been assigned, the delegate returns the value of that function
    - Otherwise the value of the last called function is returned
    - This is usually the last function added BUT THIS IS NOT GUARANTEED BY THE SPEC
    - Can get each function by using GetInvocationList()
    - Predefined generic delegates with up to 16 arguments are available in .NET
    - Delegates allow us to create a decoupled publisher-subscriber model

Events
    - Events are very much like delegates and are based on them
    - An event can be created from a delegate
    - Assign with +=, remove with -=, functions have to fit the delegate's signature
    - Events are fired the same way delegates are
    - In .NET, events have to have the arguments (object sender, EventArgs args)
    - Controls usually have events (example: Button.MouseMove) that can have functions assigned to them
    Differences from delegates:
        - Events can be included in interfaces
        - Events can only be invoked from the class they're in, delegates can be invoked anywhere
        - Events have accessor functions "add" and "remove", just like "get" and "set" for properties

Lambdas
    - A lambda expression returns a function
    - Lambdas are on the form "(args) => { body }"
    - A single argument doesn't need parentheses, and the body can be replaced by an expression
        Example: x => x * x
    - Can take 0 arguments - "() => myFunc()"

Graphics in .NET
    - .NET has a graphics object which is similar to SDK's Drawing Context
    - Overriding the method OnPaint takes the place of listening for WM_PAINT
    - OnPaint has drawing tools similar to those from the Drawing Context
    - Namespace System.Drawing contains basic drawing tools (pens, brushes, shapes etc)
    - System.Drawing.Drawing2D contains more advanced drawing tools (blending, gradients etc)
    - The Color class contains predefined colours and methods for creating new ones
    - Pens are used for drawing lines, including outlines; need a colour and a width
    - Brushes are used for filling surfaces; several types exist (solid, hatch, texture, etc); need a colour
    - Instead of overriding OnPaint we can use a drawing event, if we do not want to subclass the control
    - The graphics object is supplied to OnPaint through the event args
    - No need to delete objects

Drawing in WPF
    - Instead of drawing on a drawing surface, you use XAML objects and WPF does the drawing
    - Animating shapes just means updating their properties, and redrawing is automatic
    - When using a timer, use DispatcherTimer

Modular programming
    - Separating functionality into independent modules
    - Interfaces are used to express the description of the module's functionality
    Advantages:
        - Less code to write
        - Different people/teams can work on different bits of code
        - Errors are easier to find
        - Code is easier to reuse
        - Variables are easier to keep in the correct scope
    Disadvantages:
        - The program contains multiple modules that must all work
        - Versioning problems

MVC
    - Model-View-Controller
    - Model: Contains the data and logic of the application
    - View: Presents information to the user
    - Controller: Handles communication with the user and routes their actions to the appropriate models and views
    - The idea is to separate the Model from the View so that you can change one without having to change the other
    MVVM:
        - Model-View-ViewModel
        - Model knows nothing
        - ViewModel knows only about the Model (not the View)
        - View knows only about the ViewModel (not the Model)
        - What the shit?
        - Apparently this is what WPF uses
    MVP:
        - Model-View-Presenter
        - User interacts with the View only, not the Controller (because it doesn't exist)
        - There's a one-to-one relationship between View and Presenter

Software architecture
    - Create a design that ensures usability, stability, maintainability and security
    - Should fulfill user requirements, reduce business risks, and be flexible to changes in tech and requirements
    - Consider conflicts between users, the business, and the system
    - Build to change rather than last - it doesn't matter if it can last 10 years if it isn't good enough in 2 weeks
    - Model to analyse and reduce risk
    Key design principles:
        - Separation of Concerns
        - Single Responsibility: Each component should only do one thing
        - Principle of Least Knowledge: Nothing should know more than it needs to
        - Don't Repeat Yourself: Don't repeat yourself
        - Minimise Upfront Design
    Design practices:
        - Consistent design patterns
        - Don't duplicate functionality
        - Prefer composition to inheritance
        - Establish and stick to a coding style
        - Test your shit
        - Separate the layers of your application using abstraction
    - A component should not rely on internal details of other components
    - When something does need to cut across, keep it abstracted
    Key considerations:
        - Type of application: Web, mobile, desktop, etc
        - Deployment strategy: Physical separation, communication etc
        - Available technologies
        - Quality requirements: Security, usability, performance etc
        - Crosscutting concerns: Logging, security etc

Routed Events
    - This is one of WPF's things
    - "Passes through" a hierarchy, any handler can mark it as handled and thus prevent further handling
    - Types: Direct (no hierarchy), Bubbling (travels from inside out) and Tunneling (travels from outside in)
    - Tunneling events are prefixed with "Preview"

Universal Windows Platform (UWP)
    - Introduced in Windows 10, because of Windows Phone
    - Windows Phone has not had market success, on account of its lack of popular applications and general suckery
    - UWP can run on anything that runs some form of Windows 10
    - async: The method runs synchronously until an await is encountered, then returns to caller while waiting

Design patterns
    - A pattern is a predefined solution to a common problem
    - Also called architectural styles
    - Provides a solution to a frequently recurring problem
    Deployment style: Client/Server:
        - Distributed system: Client and server hold part of the application
        - Client handles UI, server handles business logic
        - Clients make requests, server fulfills them
        - Multiple clients can use the same server
        - Provides security, centralised data access, easy maintenance
        - Need to be wary of stability and scalability
    Structure style: Layered:
        - Divides application into layers
        - Each layer is a standalone unit
        - Communication between layers is structured
        - Abstractions are used to reduce coupling
    Communication style: Message Bus:
        - Facilitates communication between services
        - Good for letting components be completely independent of each other but can handle the same message
        - Advantages: Asynchronous, scalable, loose coupling
        - Disadvantages: Everything needs to learn to communicate with the bus, there's some overhead

LINQ
    - Language INtegrated Query
    - Queries various data sources, such as databases, XML documents or data in memory
    - Similar to SQL
    - Works with anything that implements IEnumerable
    IEnumerable:
        - An interface that allows looping with foreach as well as LINQ querying
        - Must implement GetEnumerator(), which uses yield to return one element at a time
        - yield is sort of like return, but instead of ending the method it suspends it until next call
    - To use LINQ, include the System.Linq namespace
    - Can be used either through chaining method calls or through the special LINQ syntax, or mixing these two
    - Arguments to method calls must be function pointers, lambdas are often used for this
    - Some LINQ functions return anonymous types, in this case the "var" keyword is necessary
    - "var" replaces the variable type in its declaration
    - Even with "var", the variable still has a type, you just didn't write it in the code

ADO.NET
    - Provides access to data sources such as databases or XML structures
    - With LINQ, provides easy data access
    - Found in System.Data
    - To connect to a database, use a connection string
    - Remember to Close() the connection or wrap it in a using block
    - Can be used to execute SQL directly, but you shouldn't because reasons

LINQ and ADO.NET
    - Found in System.Data.Linq
    - Uses the same connection string as ADO.NET

Entity classes
    - Entity classes are .NET classes corresponding to database tables
    - The class needs to have properties corresponding to the table's columns
    - Like in Java, entity classes mark these properties and the class itself with annotations
    - Unlike in Java, these annotations do not induce a desire to vomit violently
    - LINQ's data context object has a GetTable<type>() method where "type" is an entity class
    - This Table object can be selected from using regular LINQ queries

More XAML
    - Without specific instructions, a ListView shows the string representation of the list's items
    - Instead, you can use the tag <DataTemplate> to decide what each item should look like
    - Data binding can be used to bind data to the visual controls
    Binding requirements:
        - A binding source: An object of any class that has fields you want to show
        - A binding target: A control in the UI, e.g. a button or a label
        - A binding object: Created by XAML from strings like "{Binding name}"
    - To get data back from controls, bind a function to their Changed events (or similar) and read them there

Unsafe programming
    - Cross between managed and unmanaged code
    - Lets you address memory directly
    - Allows you to e.g. interface directly with the OS or use algorithms that work better with pointers
    - Functions that uses pointer operations (*, &, ->) must be marked as "unsafe"
    - This code is still managed though, so wtf .NET?
    - Wrap a block in "fixed" to prevent .NET from moving variables around in memory
    - Can sometimes be necessary to use functions from a C++ DLL

ASP.NET
    - .NET for web
    - Usually C#
    - Similar layout to WPF: One designer file, one presentation file (.aspx) and one code file
    - Tags are prefixed by "asp:", and are preprocessed server side before being sent to the client
    - A master page holds layout shared by multiple pages, often all pages
    - Master pages are not based on any kind of HTML frames
    - POST data can be retrieved from the form controls after checking if the page load is a postback
    - Validators can be used to validate field data - these work both client side and server side
    - Has built in support for AJAX requests, using a <ScriptManager> and an <UpdatePanel>

LINQ to XML
    - The XElement class represents an element in XML
    - This can be used to add or remove elements, or change them
    - Just like databases, XML data sources can do more complex operations such as joins

UI design
    - Main design: Usability
    - The design should be easy to both understand and use, by everyone who will use it
    - Text should be understandable, icons should be meaningful
    - Research your audience and design the application for their needs, NOT your own
    - Test your design on users, consider getting professional help as this is a hard topic
    - Comply with the standard look&feel of the platform, using the user's settings if applicable
    - Remember that some people have disabilities such as reduced eyesight, hearing etc
    - Don't get fancy - your application is a means to an end, not the new "cool kid"
    - Make sure text is simple and to the point, don't cram too many details into a small space
    - Not everyone can use a mouse or even a keyboard - make sure they can still use your app
    - Your app should be able to handle errors gracefully
    - User errors should not have major consequences without sufficient warnings
    - Don't try to "guess" what the user meant